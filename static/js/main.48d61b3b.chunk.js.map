{"version":3,"sources":["firebase/firebase.utils.js","redux/sagas.js","components/Sign_In_Out.js","components/List-Item.js","components/my-Chat.jsx","components/Chat-room.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","auth","firestore","usersRef","collection","createUserProfileDocument","userAuth","additionalData","a","userRef","doc","uid","get","exists","displayName","email","createdAt","Date","set","console","log","message","provider","GoogleAuthProvider","setCustomParameters","prompt","then","querySnapshot","forEach","data","getSnapshotFromUserAuth","signWithGoogle","isUserAuthenticated","signOut","onGoogleSignInStart","onCheckUserSession","onSignOutStart","rootSagas","signInFailure","error","type","payload","INITIAL_STATE","currentUser","call","userSnapshot","put","id","signInWithPopup","user","Promise","resolve","reject","unsubscribe","onAuthStateChanged","takeEvery","takeLatest","all","sagaMiddleware","createSagaMiddleware","store","createStore","state","action","applyMiddleware","run","SignOut","className","onClick","SignIn","googleSignInStart","connect","dispatch","styled","button","div","MyChat","Button","StyledListItem","ChatMessage","props","text","photoURL","messageClass","src","ChatRoom","useState","setCollection","query1","orderBy","limit","useCollectionData","users","dummy","useRef","messagesRef","query","idField","messages","formValue","setFormValue","openchat","setOpenchat","sendMessage","e","preventDefault","add","FieldValue","serverTimestamp","current","scrollIntoView","behavior","array4","array5","array6","array7","array8","array9","map","us","item","newArray","push","length","every","element","includes","checkArray1","handleClick","msg","ref","onSubmit","value","onChange","target","placeholder","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48d61b3b.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/analytics';\r\n\r\n\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyBjtl5dVm-h0Uah1Kwt65--WnZJJRNlamo\",\r\n  authDomain: \"my-chat-a7b6d.firebaseapp.com\",\r\n  projectId: \"my-chat-a7b6d\",\r\n  storageBucket: \"my-chat-a7b6d.appspot.com\",\r\n  messagingSenderId: \"1074409928589\",\r\n  appId: \"1:1074409928589:web:a9e5e3b5728e8377feefc4\",\r\n  measurementId: \"G-NW4RYNZQ6E\"\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n  firebase.analytics();\r\n  export const auth = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n  export const analytics = firebase.analytics();\r\n\r\n  export const usersRef = firestore.collection(\"users\");\r\n\r\n\r\n  export const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    if (!userAuth) return;\r\n  \r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n //                   firestore.collection('users').doc('userDoc');\r\n  \r\n    const snapShot = await userRef.get();\r\n  \r\n    if (!snapShot.exists) {\r\n      const { displayName, email } = userAuth;\r\n      const createdAt = new Date();\r\n      try {\r\n        await userRef.set({\r\n          displayName,\r\n          email,\r\n          createdAt,\r\n          ...additionalData\r\n        });\r\n      } catch (error) {\r\n        console.log('error creating user', error.message);\r\n      }\r\n    }\r\n  \r\n    return userRef;\r\n  };\r\n\r\n\r\n  export const getCurrentUser = () => {\r\n    return new Promise((resolve, reject) => {\r\n      const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n        unsubscribe();\r\n        resolve(userAuth);\r\n      }, reject);\r\n    });\r\n  };\r\n\r\n  export const provider = new firebase.auth.GoogleAuthProvider();\r\n  provider.setCustomParameters({ prompt: 'select_account' });\r\n//  export const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nfunction listUsers () {\r\n  usersRef.get().then((querySnapshot) =>{\r\n    querySnapshot.forEach((doc)=>{\r\n      console.log(doc.data().displayName, \" => \" ,doc.data())\r\n    }); \r\n  })\r\n}\r\nlistUsers();\r\n\r\n\r\n  export default firebase;","import { takeLatest, put, all, call, takeEvery } from 'redux-saga/effects';\r\nimport {auth, provider, createUserProfileDocument, getCurrentUser} from '.././firebase/firebase.utils';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createStore, applyMiddleware } from 'redux';\r\n\r\nexport const googleSignInStart = () => ({\r\n  type: \"GOOGLE_SIGN_IN_START\"\r\n});\r\nconst signInSuccess = user => ({\r\n  type: \"SIGN_IN_SUCCESS\",\r\n  payload: user\r\n});\r\n\r\nconst signInFailure = error => ({\r\n  type: \"SIGN_IN_FAILURE\",\r\n  payload: error\r\n});\r\n  \r\nconst checkUserSession = () => ({\r\n  type: \"CHECK_USER_SESSION\"\r\n});\r\n\r\nexport const signOutStart = () => ({\r\n  type: \"SIGN_OUT_START\"\r\n});\r\n\r\nconst signOutSuccess = () => ({\r\n  type: \"SIGN_OUT_SUCCESS\"\r\n});\r\n\r\nconst signOutFailure = error => ({\r\n  type: \"SIGN_OUT_FAILURE\",\r\n  payload: error\r\n});\r\n\r\nconst INITIAL_STATE = {\r\n  currentUser: null,\r\n  error: null\r\n};\r\n\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"SIGN_IN_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload,\r\n        error: null\r\n      };\r\n    case \"SIGN_OUT_SUCCESS\":\r\n      console.log(\"sign in success\")\r\n      return {\r\n        ...state,\r\n        currentUser: null,\r\n        error: null\r\n      };\r\n    case \"SIGN_IN_FAILURE\":\r\n    case \"SIGN_OUT_FAILURE\":\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\r\n  try {\r\n    const userRef = yield call(\r\n      createUserProfileDocument,\r\n      userAuth,\r\n      additionalData\r\n    );\r\n    const userSnapshot = yield userRef.get();\r\n    console.log(userSnapshot);\r\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signWithGoogle() {\r\n  console.log(\"sigining in with google\");\r\n  try {\r\n //  const { user } = yield auth.signWithPopup(provider);\r\n    const {user} = yield call(() => auth.signInWithPopup(provider))\r\n//    auth.signInWithPopup(googleProvider);\r\n    yield getSnapshotFromUserAuth(user);\r\n    console.log(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    const userAuth = yield getCurrentUser();\r\n    if (!userAuth) return;\r\n    yield getSnapshotFromUserAuth(userAuth);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\n\r\nexport function* signOut() {\r\n  try {\r\n    yield auth.signOut();\r\n    yield put(signOutSuccess());\r\n  } catch (error) {\r\n    yield put(signOutFailure(error));\r\n  }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeEvery(\"GOOGLE_SIGN_IN_START\", signWithGoogle);\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(\"CHECK_USER_SESSION\", isUserAuthenticated);\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n  yield takeLatest(\"SIGN_OUT_START\", signOut);\r\n}\r\n\r\n function* rootSagas() {\r\n  yield all([\r\n    call(onGoogleSignInStart),\r\n    call(signWithGoogle),\r\n    call(onCheckUserSession),\r\n    call(isUserAuthenticated),\r\n//    call(getSnapshotFromUserAuth),\r\n    call(onSignOutStart)\r\n  ]);\r\n}\r\n\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const store = createStore(userReducer, applyMiddleware(sagaMiddleware));\r\n  sagaMiddleware.run(rootSagas);\r\n  \r\n  export default store;","import React, { useRef, useState } from 'react';\r\nimport '.././App.css';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/analytics';\r\nimport { auth, signInWithGoogle } from '.././firebase/firebase.utils';\r\nimport { connect } from 'react-redux';\r\nimport {googleSignInStart, signOutStart} from '../redux/sagas';\r\n/* \r\nexport function SignIn() {\r\n    return (\r\n      <div>\r\n        <button className=\"sign-in\" onClick={signInWithGoogle}>Sign in with Google</button>\r\n      </div>\r\n    )\r\n}\r\n*/\r\n    export function SignOut() {\r\n        return auth.currentUser && (\r\n          <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\r\n        )\r\n      } \r\n\r\n      \r\n    export function SignIn({googleSignInStart, currentUser}) {\r\n\r\n        console.log(\"initial\");\r\n        const user = {currentUser};\r\n        console.log(user);\r\n        return (\r\n          <div>\r\n            <button className=\"sign-in\" onClick={googleSignInStart}>Sign in with a Google</button>\r\n          </div>\r\n        ) \r\n  }\r\n \r\n  const mapDispatchToProps = dispatch => ({\r\n    googleSignInStart: () => dispatch(googleSignInStart())\r\n  //  signOutStart: () => dispatch(signOutStart())\r\n  });\r\n\r\n  const mapStateToProps = (state) => ({\r\n    currentUser: state.currentUser\r\n  });\r\n\r\n  export default connect(mapStateToProps,mapDispatchToProps)(SignIn);\r\n\r\n  ","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst Button = styled.button`\r\n  min-width: 2px;\r\n  width: 80px;\r\n  height: auto;\r\n  letter-spacing: 0.5px;\r\n  line-height: 15px;\r\n  padding: 3px 3px 3px 3px;\r\n  font-size: 12px;\r\n  background-color: gray;\r\n  color: white;\r\n  text-transform: uppercase;\r\n  font-family: \"Open Sans Condensed\";\r\n  cursor: pointer;\r\n`;\r\n\r\nconst StyledListItem = styled.div`\r\n  padding: 10px;\r\n\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\r\n  background: white;\r\n  margin: 0 0 8px 0;\r\n  display: grid;\r\n  grid-gap: 20px;\r\n  flex-direction: column;\r\n`;\r\n\r\n\r\nfunction ListItem ({item}) {\r\n    function handleClick () {\r\n      console.log(\"open new chat\")\r\n//      <button onClick={handleClick}>X</button>\r\n    }\r\n  return (  \r\n    <StyledListItem>\r\n    <span>{item}</span>\r\n    <Button onClick={handleClick}>Start chat</Button>\r\n    </StyledListItem>     \r\n    )\r\n}\r\nexport default ListItem;","\r\nimport React, { useRef, useState } from 'react';\r\nimport '.././App.css';\r\nimport { SignIn, SignOut } from './Sign_In_Out';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/analytics';\r\nimport { auth, signInWithGoogle, usersRef, firestore } from '../firebase/firebase.utils';\r\nimport admin from 'firebase-admin';\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\r\nimport ListItem from './List-Item';\r\n\r\n\r\n\r\nfunction MyChat() {\r\n    const usersRef = firestore.collection(\"users\");\r\n    const dummy = useRef();\r\n    const messagesRef = firestore.collection('messages');\r\n    const query = messagesRef.orderBy('createdAt').limit(25);\r\n    const [messages] = useCollectionData(query, { idField: 'id' });\r\n    const [formValue, setFormValue] = useState('');\r\n    const [usersList, setUsersList] = useState([])\r\n  \r\n    const sendMessage = async (e) => {\r\n      e.preventDefault();\r\n  \r\n      const { uid, photoURL } = auth.currentUser;\r\n  \r\n      await messagesRef.add({\r\n        text: formValue,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        uid,\r\n        photoURL\r\n      })\r\n      setFormValue('');\r\n      dummy.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  \r\n\r\n    function listUsers () {\r\n      usersRef.get().then((querySnapshot) =>{\r\n        querySnapshot.forEach((doc)=>{setUsersList([...usersList, doc.data().email])\r\n        }); \r\n      })\r\n    }\r\n    \r\n    console.log(usersList);\r\n    return (\r\n    <div>\r\n      <div className=\"listGrid\">\r\n       <div className=\"userList\"> \r\n        <button onClick={listUsers}>fetch all users</button>\r\n        {usersList.map((item, key) => \r\n           <ListItem item={item} key={key} />\r\n        )}\r\n            \r\n      </div>\r\n      <main>\r\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\r\n        <span ref={dummy}></span>\r\n      </main>\r\n      </div> \r\n      <form onSubmit={sendMessage}>\r\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"type your message\" />\r\n        <button type=\"submit\" disabled={!formValue}>SEND</button>\r\n      </form>\r\n    </div>)\r\n  }\r\n  \r\n  \r\n  function ChatMessage(props) {\r\n    const { text, uid, photoURL } = props.message;\r\n    const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\r\n    return (<>\r\n      <div className={`message ${messageClass}`}>\r\n        <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\r\n        <p>{text}</p>\r\n      </div>\r\n    </>)\r\n  }\r\n\r\n/*\r\n  const listAllUsers = (nextPageToken) => {\r\n    // List batch of users, 50 at a time.\r\n    admin\r\n      .auth()\r\n      .listUsers(10, nextPageToken)\r\n      .then((listUsersResult) => {\r\n        listUsersResult.users.forEach((userRecord) => {\r\n          console.log('user', userRecord.toJSON());\r\n        });\r\n        if (listUsersResult.pageToken) {\r\n          // List next batch of users.\r\n          listAllUsers(listUsersResult.pageToken);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log('Error listing users:', error);\r\n      });\r\n  };\r\n  // Start listing users from the beginning, 1000 at a time.\r\n  listAllUsers();\r\n*/\r\n\r\n\r\n\r\n\r\n  export default MyChat;","\r\nimport React, { useRef, useState } from 'react';\r\nimport '.././App.css';\r\nimport { SignIn, SignOut } from './Sign_In_Out';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/analytics';\r\nimport { auth, signInWithGoogle, usersRef, firestore } from '../firebase/firebase.utils';\r\nimport admin from 'firebase-admin';\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\r\nimport ListItem from './List-Item';\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst Button = styled.button`\r\n  min-width: 2px;\r\n  width: 80px;\r\n  height: auto;\r\n  letter-spacing: 0.5px;\r\n  line-height: 15px;\r\n  padding: 3px 3px 3px 3px;\r\n  font-size: 12px;\r\n  background-color: gray;\r\n  color: white;\r\n  text-transform: uppercase;\r\n  font-family: \"Open Sans Condensed\";\r\n  cursor: pointer;\r\n`;\r\n\r\nconst StyledListItem = styled.div`\r\n  padding: 10px;\r\n\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\r\n  background: white;\r\n  margin: 0 0 8px 0;\r\n  display: grid;\r\n  grid-gap: 20px;\r\n  flex-direction: column;\r\n`;\r\n\r\n\r\nfunction ChatRoom() {\r\n    const [collection, setCollection] = useState('messages')\r\n    const usersRef = firestore.collection(\"users\");\r\n    const query1 = usersRef.orderBy('createdAt').limit(10);\r\n    const [users] = useCollectionData(query1);\r\n\r\n    const dummy = useRef();\r\n    const messagesRef = firestore.collection(collection);\r\n    const query = messagesRef.orderBy('createdAt').limit(25);\r\n    const [messages] = useCollectionData(query, { idField: 'id' });\r\n    const [formValue, setFormValue] = useState('');\r\n    const [usersList, setUsersList] = useState([])\r\n    const [openchat, setOpenchat] = useState(false);\r\n  \r\n    \r\n    \r\n    const sendMessage = async (e) => {\r\n      e.preventDefault();\r\n  \r\n      const { uid, photoURL } = auth.currentUser;\r\n  \r\n      await messagesRef.add({\r\n        text: formValue,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        uid,\r\n        photoURL\r\n      })\r\n      setFormValue('');\r\n      dummy.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n    \r\n\r\n    const array4 = [\"dinky013@hotmail.com\", \"jorgeasimas@gmail.com\"];\r\n    const array5 = [\"jorgeasimas@gmail.com\", \"some@mail.com\"];\r\n    const array6 = [\"dinky013@hotmail.com\", \"some@mail.com\"];\r\n    const array7 = [\"gustavo.mazzoni@gmail.com\", \"some@mail.com\"];\r\n    const array8 = [\"gustavo.mazzoni@gmail.com\", \"jorgeasimas@gmail.com\"];\r\n    const array9 = [\"dinky013@hotmail.com\", \"gustavo.mazzoni@gmail.com\"];\r\n    \r\n  \r\n    function handleClick (item) {\r\n          console.log(\"open new chat\");\r\n          const newArray = [auth.currentUser.email];\r\n          newArray.push(item);\r\n          console.log(newArray);\r\n          checkArray1(newArray);\r\n          function checkArray1(newArray) { \r\n            if (newArray.length === array4.length && newArray.every((element) => array4.includes(element))) \r\n            {setCollection(\"messages\");}\r\n            if (newArray.length === array5.length && newArray.every((element) => array5.includes(element))) \r\n            {setCollection(\"messages2\");}\r\n            if (newArray.length === array6.length && newArray.every((element) => array6.includes(element)))\r\n            {setCollection(\"messages3\");}\r\n            if (newArray.length === array7.length && newArray.every((element) => array7.includes(element))) \r\n            {setCollection(\"messages4\");}\r\n            if (newArray.length === array8.length && newArray.every((element) => array8.includes(element))) \r\n            {setCollection(\"messages5\");}\r\n            if (newArray.length === array9.length && newArray.every((element) => array9.includes(element)))\r\n            {setCollection(\"messages6\");}\r\n          }\r\n          setOpenchat(!openchat);\r\n    //      <button onClick={handleClick}>X</button>\r\n        }\r\n    return (\r\n    <div>\r\n      <div className=\"listGrid\">\r\n       <div className=\"userList\"> \r\n        {users && users.map(us =>   \r\n            <StyledListItem>\r\n           <span>{us.email}</span>\r\n            <Button onClick={() => handleClick(us.email)}>Start chat</Button>\r\n            </StyledListItem>   \r\n        )\r\n    }\r\n            \r\n      </div>\r\n      <main>\r\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\r\n        <span ref={dummy}></span>\r\n      </main>\r\n      <form onSubmit={sendMessage}>\r\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"type your message\" />\r\n        <button type=\"submit\" disabled={!formValue}>SEND</button>\r\n      </form>\r\n      </div> \r\n\r\n    </div>)\r\n  }\r\n  \r\n  \r\n  function ChatMessage(props) {\r\n    const { text, uid, photoURL } = props.message;\r\n    const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\r\n    return (<>\r\n      <div className={`message ${messageClass}`}>\r\n        <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\r\n        <p>{text}</p>\r\n      </div>\r\n    </>)\r\n  }\r\n\r\n  export default ChatRoom;","import React, { useRef, useState }  from 'react';\nimport './App.css';\nimport { SignIn, SignOut } from './components/Sign_In_Out';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\nimport MyChat from './components/my-Chat';\nimport { connect } from 'react-redux';\nimport ChatRoom from './components/Chat-room';\n\nfunction App({currentUser}) {\n\n//  const [user] = useAuthState(auth);  \n   const user = currentUser;\n   console.log(user)\n\n\n  return (\n    <div className=\"App\">\n      <header>\n      <SignOut />\n      </header>\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n    </div>\n  );\n}\n\n//export default App;\n\n\nconst mapStateToProps = (state) => ({\n  currentUser: state.currentUser\n});\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/sagas';\nimport { Provider } from \"react-redux\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}