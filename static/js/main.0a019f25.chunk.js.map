{"version":3,"sources":["firebase/firebase.utils.js","redux/actions-types.js","components/Sign_In_Out.js","components/my-Chat.jsx","App.js","redux/reducer.js","redux/sagas.js","redux/store.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","googleProvider","analytics","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","UserActionTypes","signInFailure","error","type","payload","SignIn","className","onClick","SignOut","currentUser","signOut","ChatMessage","props","message","text","uid","photoURL","messageClass","src","MyChat","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","add","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","id","ref","onSubmit","value","onChange","target","placeholder","disabled","App","useAuthState","user","INITIAL_STATE","userReducer","state","action","getSnapshotFromUserAuth","onGoogleSignInStart","onSignOutStart","userSagas","userAuth","additionalData","call","userRef","get","userSnapshot","put","data","console","log","takeLatest","all","rootSaga","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a019f25.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/analytics';\r\n\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyBjtl5dVm-h0Uah1Kwt65--WnZJJRNlamo\",\r\n    authDomain: \"my-chat-a7b6d.firebaseapp.com\",\r\n    projectId: \"my-chat-a7b6d\",\r\n    storageBucket: \"my-chat-a7b6d.appspot.com\",\r\n    messagingSenderId: \"1074409928589\",\r\n    appId: \"1:1074409928589:web:a9e5e3b5728e8377feefc4\",\r\n    measurementId: \"G-NW4RYNZQ6E\"\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  export const auth = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n  export const analytics = firebase.analytics();\r\n\r\n  export const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n  googleProvider.setCustomParameters({ prompt: 'select_account' });\r\n  export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\n  export default firebase;","export const UserActionTypes = {\r\n    SET_CURRENT_USER: 'SET_CURRENT_USER',\r\n    GOOGLE_SIGN_IN_START: 'GOOGLE_SIGN_IN_START',\r\n    SIGN_IN_SUCCESS: 'SIGN_IN_SUCCESS',\r\n    SIGN_IN_FAILURE: 'SIGN_IN_FAILURE',\r\n    CHECK_USER_SESSION: 'CHECK_USER_SESSION',\r\n    SIGN_OUT_START: 'SIGN_OUT_START',\r\n    SIGN_OUT_SUCCESS: 'SIGN_OUT_SUCCESS',\r\n    SIGN_OUT_FAILURE: 'SIGN_OUT_FAILURE'\r\n  };\r\n\r\nexport const googleSignInStart = () => ({\r\n    type: UserActionTypes.GOOGLE_SIGN_IN_START\r\n \r\n  });\r\n  \r\n  export const signInSuccess = user => ({\r\n    type: UserActionTypes.SIGN_IN_SUCCESS,\r\n    payload: user\r\n  });\r\n  \r\n  export const signInFailure = error => ({\r\n    type: UserActionTypes.SIGN_IN_FAILURE,\r\n    payload: error\r\n  });\r\n    \r\n  export const checkUserSession = () => ({\r\n    type: UserActionTypes.CHECK_USER_SESSION\r\n  });\r\n  \r\n  export const signOutStart = () => ({\r\n    type: UserActionTypes.SIGN_OUT_START\r\n  });\r\n  \r\n  export const signOutSuccess = () => ({\r\n    type: UserActionTypes.SIGN_OUT_SUCCESS\r\n  });\r\n  \r\n  export const signOutFailure = error => ({\r\n    type: UserActionTypes.SIGN_OUT_FAILURE,\r\n    payload: error\r\n  });","import React, { useRef, useState } from 'react';\r\nimport '.././App.css';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/analytics';\r\nimport { auth, signInWithGoogle, firestore } from '.././firebase/firebase.utils';\r\nimport { connect } from 'react-redux';\r\nimport {googleSignInStart, signOutStart} from './../redux/actions-types';\r\n\r\nexport function SignIn() {\r\n    return (\r\n      <div>\r\n        <button className=\"sign-in\" onClick={signInWithGoogle}>Sign in with Google</button>\r\n      </div>\r\n    )\r\n}\r\n    export function SignOut() {\r\n        return auth.currentUser && (\r\n          <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\r\n        )\r\n      }\r\n\r\n\r\n\r\n /*   \r\n    export function SignIn({googleSignInStart, currentUser}) {\r\n        console.log(\"initial\");\r\n        const sign = googleSignInStart;\r\n        const user = {currentUser};\r\n        console.log(user);\r\n        return (\r\n          <div>\r\n            <button className=\"sign-in\" onClick={sign}>Sign in with a Google</button>\r\n          </div>\r\n        ) \r\n    \r\n\r\n  }\r\n \r\n\r\n\r\n  //export default SignIn;\r\n\r\n  /*\r\n  const mapDispatchToProps = dispatch => ({\r\n    googleSignInStart: () => dispatch(googleSignInStart())\r\n  //  signOutStart: () => dispatch(signOutStart())\r\n  });\r\n\r\n  const mapStateToProps = (state) => ({\r\n    currentUser: state.currentUser\r\n  });\r\n\r\n  export default connect(mapStateToProps,mapDispatchToProps)(SignIn)\r\n\r\n  */","\r\nimport React, { useRef, useState } from 'react';\r\nimport '.././App.css';\r\nimport { SignIn, SignOut } from './Sign_In_Out';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/analytics';\r\nimport { auth, signInWithGoogle, firestore } from '../firebase/firebase.utils';\r\n\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\r\n\r\n\r\n\r\nfunction MyChat() {\r\n\r\n    const dummy = useRef();\r\n    const messagesRef = firestore.collection('messages');\r\n    const query = messagesRef.orderBy('createdAt').limit(25);\r\n    const [messages] = useCollectionData(query, { idField: 'id' });\r\n    const [formValue, setFormValue] = useState('');\r\n  \r\n    const sendMessage = async (e) => {\r\n      e.preventDefault();\r\n  \r\n      const { uid, photoURL } = auth.currentUser;\r\n  \r\n      await messagesRef.add({\r\n        text: formValue,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        uid,\r\n        photoURL\r\n      })\r\n      setFormValue('');\r\n      dummy.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  \r\n    return (\r\n    <div>\r\n      <main>\r\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\r\n        <span ref={dummy}></span>\r\n      </main>\r\n      <form onSubmit={sendMessage}>\r\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"type your message\" />\r\n        <button type=\"submit\" disabled={!formValue}>SEND</button>\r\n      </form>\r\n    </div>)\r\n  }\r\n  \r\n  \r\n  function ChatMessage(props) {\r\n    const { text, uid, photoURL } = props.message;\r\n    const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\r\n    return (<>\r\n      <div className={`message ${messageClass}`}>\r\n        <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\r\n        <p>{text}</p>\r\n      </div>\r\n    </>)\r\n  }\r\n\r\n  export default MyChat;","import React, { useRef, useState }  from 'react';\nimport './App.css';\nimport { SignIn, SignOut } from './components/Sign_In_Out';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\nimport { auth, signInWithGoogle, firestore } from './firebase/firebase.utils';\nimport MyChat from './components/my-Chat';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport { connect } from 'react-redux';\n\nfunction App({currentUser}) {\n\n  const [user] = useAuthState(auth);\n // const user = currentUser;\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <SignOut />\n      </header>\n      <section>\n        {user ? <MyChat /> : <SignIn />}\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n\n/*\nconst mapStateToProps = (state) => ({\n  currentUser: state.currentUser\n});\n\nexport default connect(mapStateToProps)(App);\n*/","import {UserActionTypes} from './actions-types';\r\n\r\nconst INITIAL_STATE = {\r\n  currentUser: null,\r\n  error: null\r\n};\r\n\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case UserActionTypes.SIGN_IN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload,\r\n        error: null\r\n      };\r\n    case UserActionTypes.SIGN_OUT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentUser: null,\r\n        error: null\r\n      };\r\n    case UserActionTypes.SIGN_IN_FAILURE:\r\n    case UserActionTypes.SIGN_OUT_FAILURE:\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;","import { takeLatest, put, all, call } from 'redux-saga/effects';\r\nimport {signInSuccess,signInFailure,signOutSuccess,signOutFailure, UserActionTypes} from './actions-types';\r\nimport {auth,googleProvider} from '.././firebase/firebase.utils';\r\n\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\r\n  try {\r\n    const userRef = yield call(\r\n      userAuth,\r\n      additionalData\r\n    );\r\n    const userSnapshot = yield userRef.get();\r\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n  try {\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n    console.log(\"here\");\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n/*\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    const userAuth = yield getCurrentUser();\r\n    if (!userAuth) return;\r\n    yield getSnapshotFromUserAuth(userAuth);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n*/\r\n\r\nexport function* signOut() {\r\n  try {\r\n    yield auth.signOut();\r\n    yield put(signOutSuccess());\r\n  } catch (error) {\r\n    yield put(signOutFailure(error));\r\n  }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    console.log(\"here\");\r\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\n/*\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n*/\r\nexport function* onSignOutStart() {\r\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onGoogleSignInStart),\r\n  //  call(onCheckUserSession),\r\n    call(onSignOutStart)\r\n  ]);\r\n}","import { createStore, applyMiddleware } from 'redux';\r\n//import { persistStore } from 'redux-persist';\r\nimport logger from 'redux-logger';\r\n//import storage from 'redux-persist/lib/storage';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport userReducer from './reducer';\r\nimport { all, call } from 'redux-saga/effects';\r\nimport { userSagas } from './sagas';\r\n\r\n\r\n function* rootSaga() {\r\n  yield all([call(userSagas)]);\r\n}\r\n\r\nconst rootReducer = {\r\n    user: userReducer\r\n  };\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middlewares = [sagaMiddleware];\r\n\r\n//if (process.env.NODE_ENV === 'development') {\r\n//  middlewares.push(logger);\r\n//}\r\n\r\nconst store = createStore(userReducer, applyMiddleware(...middlewares));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\n//export const persistor = persistStore(store);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/store';\nimport { Provider } from \"react-redux\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}